#!/usr/bin/python
# --------------------------------------------------------------------------
# Class definition of LedController - utility functions for the LED-strip
#
# This class also takes care of updating the LEDs during idle time
# (e.g. for clock-simulation)
#
# Please edit /etc/nerd-alarmclock.conf to configure this thread
#
# Author: Bernhard Bablok
# License: GPL3
#
# Website: https://github.com/bablokb/nerd-alarmclock
#
# --------------------------------------------------------------------------

import time, threading, colorsys, json

try:
  import blinkt
  simulate=False
except:
  # we assume our test-environment
  simulate=True

class LedController(object):
  """ Utility functions for the LED-strip """

  BNESS  = [0.0, 0.05, 0.1, 0.2, 0.4]     # usable brightness-values
  RED    = (255,0,0)
  YELLOW = (255,255,0)
  GREEN  = (0,255,0)
  BLUE   = (0,0,255)
  VIOLET = (176,52,207)
  COLORS = [RED,VIOLET,GREEN,BLUE]

  # initialize object   ----------------------------------------------------

  def __init__(self,settings):
    """ Constructor """
    self._settings = settings
    self._lock     = threading.Lock()

    # set time and brightness
    settings.set("_lights_off",False)
    self._brightness   = 2       # next time-change will overwrite this
    self._day_of_month = time.localtime().tm_mday
    self._set_leds()

    settings.add_settings_listener('led.brightness.day',self.on_brightness)
    settings.add_settings_listener('led.brightness.night',self.on_brightness)
    settings.add_settings_listener('led.mode',self.on_mode)

    settings.add_settings_listener('_current_date',self.on_date)
    settings.add_settings_listener('_day_mode',self.on_day_mode)
    settings.add_settings_listener('_led.lamp.state',self.on_lamp_state)
    settings.add_settings_listener('_lights_off',self.on_lights_off)
    settings.add_alarm_provider(self.get_alarm)

    # save list of alarms in settings
    alarms = []
    for method in dir(self):
      if method.startswith("alarm_"):
        alarms.append(method[6:])
    settings.set("_led_alarms",alarms)

    # save list of modes in settings
    modes = []
    for method in dir(self):
      if method.startswith("mode_"):
        modes.append(method[5:])
    settings.set("_led_modes",modes)
    settings.log.msg("LedController: available modes: %r" % (modes,))

  # --- set the LEDs depending on the mode   -------------------------------

  def _set_leds(self):
    """ set LEDs dependig on the mode """

    # reset brightness to saved value
    self._set_brightness()

    # execute current led-mode function
    mode = self._settings.get("led.mode")
    func_name = "mode_%s" % mode
    if hasattr(self,func_name):
      func = getattr(self,func_name)
      self._settings.log.msg("LedController: executing %s" % func_name)
    else:
      func = getattr(self,"mode_dom")          # fallback, should not happen
      self._settings.log.msg(
        "LedController: no function %s, falling back to mode_dom" % func_name)
    func()

  # --- mode lamp: turn on LEDs   -----------------------------------------

  def mode_lamp(self):
    """ turn on all LEDs """

    state = self._settings.get("_led.lamp.state")
    if state:
      self._settings.log.msg("LedController: lamp-mode: lamp on")
    else:
      self._settings.log.msg("LedController: lamp-mode: lamp off")

    if not simulate:
      rgb        = self._settings.get("led.lamp.rgb")
      brightness = self._settings.get("led.lamp.brightness")
      if self._lock.acquire(False):
        blinkt.clear()
        if state:
          blinkt.set_all(rgb[0],rgb[1],rgb[2],LedController.BNESS[brightness])
        blinkt.show()
        self._lock.release()

  # --- mode dom: set the day of month   ----------------------------------

  def mode_dom(self):
    """ show the given day of month on the led """

    self._settings.log.msg("LedController: setting day of month to: %d" % self._day_of_month)
    if not simulate:
      num_leds  = (self._day_of_month - 1) % 8 + 1
      col_index = (self._day_of_month - 1) // 8
      color = LedController.COLORS[col_index]
      # could be during an alarm, so ignore if we can't get the lock
      # (at the end of the alarm this method will be called anyhow)
      if self._lock.acquire(False):
        blinkt.clear()
        for i in range(num_leds):
          blinkt.set_pixel(i,color[0],color[1],color[2])
        blinkt.show()
        self._lock.release()

  # --- set the brightness of the LEDs   -----------------------------------

  def _set_brightness(self,value=None,force=False):
    """ Set the brightness of the leds """

    # check if we set an explicit value or the saved default
    if not force and not value is None:
      self._brightness = value

    # check if lights are turned off
    if force:
      target_brightness = value
    elif self._settings.get("_lights_off"):
      target_brightness = 0
    else:
      target_brightness = self._brightness

    self._settings.log.msg(
      "LedController: setting brightness to: %d" % target_brightness)
    if not simulate:
      # could be during an alarm, so ignore if we can't get the lock
      # (at the end of the alarm this method will be called anyhow)
      if self._lock.acquire(False):
        # we only use off and four levels, so scale new appropriately
        blinkt.set_brightness(LedController.BNESS[target_brightness])
        blinkt.show()
        self._lock.release()

  # --- LED-mode change listener   -----------------------------------------

  def on_mode(self,name,old,new):
    """ process LED-mode changes """

    self._settings.log.msg("LedController: changing mode to %s" % new)
    self._set_leds()

  # --- lights_off change listener   ---------------------------------------

  def on_lights_off(self,name,old,new):
    """ process lights_off-change events (update LEDs)"""
    self._settings.log.msg("LedController: on_lights_off(%s,%s)" % (old,new))
    self._set_leds()

  # --- day-mode change listener   -----------------------------------------

  def on_day_mode(self,name,old,new):
    """ process day-mode changes """

    value = self._settings.get("led.brightness."+new)
    self._set_brightness(value)

  # --- lamp state listener   ----------------------------------------------

  def on_lamp_state(self,name,old,new):
    """ process lamp-state changes """

    # we jut call _set_leds(), since mode_lamp will pick up the new state
    # if not in lamp-mode, state will be ignored
    self._set_leds()

  # --- date change listener   ---------------------------------------------

  def on_date(self,name,old,new):
    """ process date-change events (e.g. change LEDs)"""

    self._settings.log.msg("LedController: on_date(%s,%s)" % (old,new))

    # set day-of-month
    self._day_of_month = int(new.split(':')[2])
    self._set_leds()

  # --- brightness change listener   ---------------------------------------

  def on_brightness(self,name,old,new):
    """ process brightness-changes """

    self._settings.log.msg("LedController: on_brightness(%s,%s)" % (old,new))
    self._set_brightness(new)

  # --- get runnable alarm   -----------------------------------------------

  def get_alarm(self,nr,alarm):
    """ return runnable alarm """

    self._settings.log.msg("LedController: creating alarm-thread for alarm %s" % nr)

    # query alarm-settings
    try:
      cfg = json.loads(self._settings.get("alarm.%s.led" % nr))
    except:
      cfg = self._settings.get("alarm.%s.led" % nr,deep=True)

    if not cfg.has_key('name') or not cfg['name']:
      return None

    if not hasattr(self,"alarm_"+cfg['name']):
      self._settings.log.msg("LedController: unsupported alarm: %s" % cfg['name'])
      return None
      
    alarm_func=getattr(self,"alarm_"+cfg['name'])
    del cfg['name']

    # return alarm
    t = threading.Thread(target=alarm_func,args=(alarm.event,),kwargs=cfg)
    return t

  # sunrise simulation   ---------------------------------------------------

  def alarm_sunrise(self,stop_me,duration=10,delay=0):
    """ sunrise simulation for the light-alarm """

    duration = int(duration)

    self._settings.log.msg(
      "LedController: running sunrise-alarm for %s minutes" % duration)

    # honor delay
    delay = int(delay)
    if delay > 0:
      self._settings.log.msg(
        "LedController: delaying alarm for %d minutes" % delay)
      if stop_me.wait(60*delay):
        return

    if simulate:
      stop_me.wait(60*duration)
      self._settings.log.msg("LedController: sunrise-alarm ended")
      return

    # hue is in degrees
    HUE_START = 0                         # red
    HUE_END   = 50                        # yellow
    L_START   = 0.2

    delta   = 1.0/(duration*60)           # fraction per second
    H_delta = (HUE_END - HUE_START)*delta
    L_delta = (1.0-L_START)*delta

    # iterate from led-brightness low->high, hue start->end,
    #         saturation high->low, lightness low->high

    H          = HUE_START
    brightness = delta
    S          = 1.0
    L          = L_START

    sec = 0
    with self._lock:
      while sec <= duration*60:
        # wait one second and bail out if stopped
        if stop_me.wait(1):
          break

        # convert HSL to RGB ...
        (R,G,B) = colorsys.hls_to_rgb(H/360.0,L,S)
        R = 255*R
        G = 255*G
        B = 255*B

        # ... and show
        blinkt.set_all(R,G,B,brightness)
        blinkt.show()

        # update values
        sec        = sec + 1
        brightness = brightness + delta
        H          = H + H_delta
        L          = L + L_delta

    # reset display to standard
    self._settings.log.msg("LedController: sunrise-alarm ended")
    self._set_leds()

  # police signal   --------------------------------------------------------

  def alarm_bluelights(self,stop_me,duration=5,delay=0):
    """ simulate police signal """
    self._running_light(stop_me,duration,rgb=[0,0,255],delay=delay)

  # fire signal   ----------------------------------------------------------

  def alarm_redlights(self,stop_me,duration=5,delay=0):
    """ simulate fire signal """
    self._running_light(stop_me,duration,rgb=[255,0,0],delay=delay)

  # light signal   ---------------------------------------------------------

  def alarm_whitelights(self,stop_me,duration=5,delay=0):
    """ simulate fire signal """
    self._running_light(stop_me,duration,rgb=[255,255,255],delay=delay)

  # running light   --------------------------------------------------------

  def _running_light(self,stop_me,duration=5,rgb=[0,0,255],delay=0):
    """ running light of defined color (modified from blinkt-example larson.py) """
    
    duration = int(duration)

    self._settings.log.msg(
      "LedController: executing running_light-alarm for %s minutes" % duration)

    (r,g,b) = rgb
    values = [(0,0,0), (0,0,0), (0,0,0), (0,0,0), (0,0,0),
              (r//16,g//16,b//16),
              (r//4,g//4,b//4),
              (r,g,b),
              (r//4,g//4,b//4),
              (r//16,g//16,b//16),
              (0,0,0), (0,0,0), (0,0,0), (0,0,0), (0,0,0), (0,0,0)]

    start_time = time.time()
    end_time   = start_time + 60*duration
    now        = start_time

    # honor delay
    delay = int(delay)
    if delay > 0:
      self._settings.log.msg(
        "LedController: delaying alarm for %d minutes" % delay)
      if stop_me.wait(60*delay):
        return

    if simulate:
      stop_me.wait(60*duration)
      self._settings.log.msg("LedController: running_light-alarm finished")
    else:
      with self._lock:
        blinkt.set_brightness(1.0)
        while now <= end_time:

          delta  = (now - start_time) * 16
          offset = int(abs((delta % 16) - 8))

          for i in range(8):
            (rv,gv,bv) = values[offset + i]
            blinkt.set_pixel(i,rv,gv,bv)

          blinkt.show()
          if stop_me.wait(0.1):
            break
          now = time.time()

      # reset display to standard
      self._settings.log.msg("LedController: running_light-alarm finished")
      self._set_leds()
